// Code generated by fluentfga. DO NOT EDIT.
package fga

import (
	"fmt"
)

// User is the "user" type.
type User struct {
	UserID string
}

func (User) object() string   { return "user" }
func (u User) id() string     { return fmt.Sprint(u.UserID) }
func (u User) String() string { return fmt.Sprint("user:", u.UserID) }

type UserType struct {
	model *AuthorizationModel
}

// User Relations

// Document is the "document" type.
type Document struct {
	DocumentID string
}

func (Document) object() string   { return "document" }
func (d Document) id() string     { return fmt.Sprint(d.DocumentID) }
func (d Document) String() string { return fmt.Sprint("document:", d.DocumentID) }

type DocumentType struct {
	model *AuthorizationModel
}

// Document Relations

// DocumentCommenterRelationUser is the userset for the "document#commenter" relation.
// It is a union of the following types:
//   - User
//   - DomainMemberUserset
type DocumentCommenterRelationUser interface {
	Object
	Relation
	documentCommenterRelationUser()
}

func (User) documentCommenterRelationUser() {}

func (DomainMemberUserset) documentCommenterRelationUser() {}

// Commenter is the "commenter" relation.
func (d DocumentType) Commenter() DirectRelation[DocumentCommenterRelationUser, Document] {
	return DirectRelation[DocumentCommenterRelationUser, Document]{
		model: d.model,
		rel:   "commenter",
		obj:   "document",
	}
}

// DocumentCommenterUserset is the userset for the "document#commenter" relation.
type DocumentCommenterUserset struct {
	Document
}

func (DocumentCommenterUserset) relation() string { return "commenter" }
func (c DocumentCommenterUserset) String() string {
	return fmt.Sprint(c.Document.String(), "#commenter")
}

func (d Document) Commenter() DocumentCommenterUserset {
	return DocumentCommenterUserset{d}
}

// DocumentOwnerRelationUser is the userset for the "document#owner" relation.
// It is a union of the following types:
//   - User
//   - DomainMemberUserset
type DocumentOwnerRelationUser interface {
	Object
	Relation
	documentOwnerRelationUser()
}

func (User) documentOwnerRelationUser() {}

func (DomainMemberUserset) documentOwnerRelationUser() {}

// Owner is the "owner" relation.
func (d DocumentType) Owner() DirectRelation[DocumentOwnerRelationUser, Document] {
	return DirectRelation[DocumentOwnerRelationUser, Document]{
		model: d.model,
		rel:   "owner",
		obj:   "document",
	}
}

// DocumentOwnerUserset is the userset for the "document#owner" relation.
type DocumentOwnerUserset struct {
	Document
}

func (DocumentOwnerUserset) relation() string { return "owner" }
func (o DocumentOwnerUserset) String() string { return fmt.Sprint(o.Document.String(), "#owner") }

func (d Document) Owner() DocumentOwnerUserset {
	return DocumentOwnerUserset{d}
}

// DocumentViewerRelationUser is the userset for the "document#viewer" relation.
// It is a union of the following types:
//   - User
//   - DomainMemberUserset
type DocumentViewerRelationUser interface {
	Object
	Relation
	documentViewerRelationUser()
}

func (User) documentViewerRelationUser() {}

func (DomainMemberUserset) documentViewerRelationUser() {}

// Viewer is the "viewer" relation.
func (d DocumentType) Viewer() DirectRelation[DocumentViewerRelationUser, Document] {
	return DirectRelation[DocumentViewerRelationUser, Document]{
		model: d.model,
		rel:   "viewer",
		obj:   "document",
	}
}

// DocumentViewerUserset is the userset for the "document#viewer" relation.
type DocumentViewerUserset struct {
	Document
}

func (DocumentViewerUserset) relation() string { return "viewer" }
func (v DocumentViewerUserset) String() string { return fmt.Sprint(v.Document.String(), "#viewer") }

func (d Document) Viewer() DocumentViewerUserset {
	return DocumentViewerUserset{d}
}

// DocumentWriterRelationUser is the userset for the "document#writer" relation.
// It is a union of the following types:
//   - User
//   - DomainMemberUserset
type DocumentWriterRelationUser interface {
	Object
	Relation
	documentWriterRelationUser()
}

func (User) documentWriterRelationUser() {}

func (DomainMemberUserset) documentWriterRelationUser() {}

// Writer is the "writer" relation.
func (d DocumentType) Writer() DirectRelation[DocumentWriterRelationUser, Document] {
	return DirectRelation[DocumentWriterRelationUser, Document]{
		model: d.model,
		rel:   "writer",
		obj:   "document",
	}
}

// DocumentWriterUserset is the userset for the "document#writer" relation.
type DocumentWriterUserset struct {
	Document
}

func (DocumentWriterUserset) relation() string { return "writer" }
func (w DocumentWriterUserset) String() string { return fmt.Sprint(w.Document.String(), "#writer") }

func (d Document) Writer() DocumentWriterUserset {
	return DocumentWriterUserset{d}
}

// Domain is the "domain" type.
type Domain struct {
	DomainID string
}

func (Domain) object() string   { return "domain" }
func (d Domain) id() string     { return fmt.Sprint(d.DomainID) }
func (d Domain) String() string { return fmt.Sprint("domain:", d.DomainID) }

type DomainType struct {
	model *AuthorizationModel
}

// Domain Relations

// Member is the "member" relation.
func (d DomainType) Member() DirectRelation[User, Domain] {
	return DirectRelation[User, Domain]{
		model: d.model,
		rel:   "member",
		obj:   "domain",
	}
}

// DomainMemberUserset is the userset for the "domain#member" relation.
type DomainMemberUserset struct {
	Domain
}

func (DomainMemberUserset) relation() string { return "member" }
func (m DomainMemberUserset) String() string { return fmt.Sprint(m.Domain.String(), "#member") }

func (d Domain) Member() DomainMemberUserset {
	return DomainMemberUserset{d}
}
