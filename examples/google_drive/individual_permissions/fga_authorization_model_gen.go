// Code generated by fluentfga. DO NOT EDIT.
package fga

import (
	"context"

	sdkclient "github.com/openfga/go-sdk/client"
)

func NewAuthorizationModel(client sdkclient.SdkClient) *AuthorizationModel {
	return &AuthorizationModel{
		client: client,
	}
}

type AuthorizationModel struct {
	client sdkclient.SdkClient
}

func (m *AuthorizationModel) User() UserType         { return UserType{m} }
func (m *AuthorizationModel) Document() DocumentType { return DocumentType{m} }

func (m *AuthorizationModel) check(ctx context.Context, user Object, rel Relation, obj Object) (bool, error) {
	res, err := m.client.Check(ctx).
		Body(sdkclient.ClientCheckRequest{
			User:     user.String(),
			Relation: rel.relation(),
			Object:   obj.String(),
		}).
		Execute()

	if err != nil {
		return false, err
	}
	return res.GetAllowed(), nil
}

func (m *AuthorizationModel) write(ctx context.Context, user Object, rel Relation, obj Object) error {
	_, err := m.client.Write(ctx).
		Body(sdkclient.ClientWriteRequest{
			Writes: []sdkclient.ClientTupleKey{
				{
					User:     user.String(),
					Relation: rel.relation(),
					Object:   obj.String(),
				},
			},
		}).
		Execute()

	if err != nil {
		return err
	}
	return nil
}

func (m *AuthorizationModel) delete(ctx context.Context, user Object, rel Relation, obj Object) error {
	_, err := m.client.Write(ctx).
		Body(sdkclient.ClientWriteRequest{
			Deletes: []sdkclient.ClientTupleKeyWithoutCondition{
				{
					User:     user.String(),
					Relation: rel.relation(),
					Object:   obj.String(),
				},
			},
		}).
		Execute()

	if err != nil {
		return err
	}
	return nil
}
