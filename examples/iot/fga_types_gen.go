// Code generated by fluentfga. DO NOT EDIT.
package fga

type Type interface {
	typeName() string
}

// UserType represents the "user" type and provides interfaces for its relations.
type UserType struct {
	model *AuthorizationModel
}

func (UserType) typeName() string { return "user" }

// DeviceType represents the "device" type and provides interfaces for its relations.
type DeviceType struct {
	model *AuthorizationModel
}

func (DeviceType) typeName() string { return "device" }

// ItAdmin provides an interface for the "device#it_admin" relation.
func (d DeviceType) ItAdmin() DirectRelation[DeviceItAdminUser, Device] {
	return DirectRelation[DeviceItAdminUser, Device]{
		model: d.model,
		typ:   "device",
		rel:   "it_admin",
	}
}

// DeviceItAdminUser represents the possible user types for the "device#it_admin" relation.
// It is a union of the following types:
//   - User
//   - DeviceGroupItAdminUserset
type DeviceItAdminUser interface {
	Object
	deviceItAdminUser()
}

func (User) deviceItAdminUser()                      {}
func (DeviceGroupItAdminUserset) deviceItAdminUser() {}

// SecurityGuard provides an interface for the "device#security_guard" relation.
func (d DeviceType) SecurityGuard() DirectRelation[DeviceSecurityGuardUser, Device] {
	return DirectRelation[DeviceSecurityGuardUser, Device]{
		model: d.model,
		typ:   "device",
		rel:   "security_guard",
	}
}

// DeviceSecurityGuardUser represents the possible user types for the "device#security_guard" relation.
// It is a union of the following types:
//   - User
//   - DeviceGroupSecurityGuardUserset
type DeviceSecurityGuardUser interface {
	Object
	deviceSecurityGuardUser()
}

func (User) deviceSecurityGuardUser()                            {}
func (DeviceGroupSecurityGuardUserset) deviceSecurityGuardUser() {}

// LiveVideoViewer provides an interface for the "device#live_video_viewer" relation.
func (d DeviceType) LiveVideoViewer() IndirectRelation[Device] {
	return IndirectRelation[Device]{
		model: d.model,
		typ:   "device",
		rel:   "live_video_viewer",
	}
}

// RecordedVideoViewer provides an interface for the "device#recorded_video_viewer" relation.
func (d DeviceType) RecordedVideoViewer() IndirectRelation[Device] {
	return IndirectRelation[Device]{
		model: d.model,
		typ:   "device",
		rel:   "recorded_video_viewer",
	}
}

// DeviceRenamer provides an interface for the "device#device_renamer" relation.
func (d DeviceType) DeviceRenamer() IndirectRelation[Device] {
	return IndirectRelation[Device]{
		model: d.model,
		typ:   "device",
		rel:   "device_renamer",
	}
}

// DeviceGroupType represents the "device_group" type and provides interfaces for its relations.
type DeviceGroupType struct {
	model *AuthorizationModel
}

func (DeviceGroupType) typeName() string { return "device_group" }

// SecurityGuard provides an interface for the "device_group#security_guard" relation.
func (d DeviceGroupType) SecurityGuard() DirectRelation[User, DeviceGroup] {
	return DirectRelation[User, DeviceGroup]{
		model: d.model,
		typ:   "device_group",
		rel:   "security_guard",
	}
}

// ItAdmin provides an interface for the "device_group#it_admin" relation.
func (d DeviceGroupType) ItAdmin() DirectRelation[User, DeviceGroup] {
	return DirectRelation[User, DeviceGroup]{
		model: d.model,
		typ:   "device_group",
		rel:   "it_admin",
	}
}
