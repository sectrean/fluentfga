// Code generated by fluentfga. DO NOT EDIT.
package model

import (
	"fmt"

	fluentfga "github.com/johnrutherford/fluentfga"
)

// User represents an object of the "user" type.
type User struct {
	ID string
}

func (User) Provider() fluentfga.ObjectProvider { return objectProvider{} }
func (User) FgaType() string                    { return "user" }
func (o User) Identifier() string               { return fmt.Sprint(o.ID) }
func (o User) String() string                   { return fmt.Sprint("user:", o.ID) }
func (User) IsFilterable()                      {}

// Device represents an object of the "device" type.
type Device struct {
	ID string
}

func (Device) Provider() fluentfga.ObjectProvider { return objectProvider{} }
func (Device) FgaType() string                    { return "device" }
func (o Device) Identifier() string               { return fmt.Sprint(o.ID) }
func (o Device) String() string                   { return fmt.Sprint("device:", o.ID) }
func (Device) IsFilterable()                      {}

// DeviceGroup represents an object of the "device_group" type.
type DeviceGroup struct {
	ID string
}

func (DeviceGroup) Provider() fluentfga.ObjectProvider { return objectProvider{} }
func (DeviceGroup) FgaType() string                    { return "device_group" }
func (o DeviceGroup) Identifier() string               { return fmt.Sprint(o.ID) }
func (o DeviceGroup) String() string                   { return fmt.Sprint("device_group:", o.ID) }
func (DeviceGroup) IsFilterable()                      {}

// DeviceGroupItAdminUserset represents the "device_group:{ID}#it_admin" userset.
type DeviceGroupItAdminUserset struct {
	DeviceGroup
}

func (DeviceGroupItAdminUserset) Provider() fluentfga.ObjectProvider { return objectProvider{} }
func (DeviceGroupItAdminUserset) Relation() string                   { return "it_admin" }
func (u DeviceGroupItAdminUserset) String() string {
	return fmt.Sprint("device_group:", u.Identifier(), "#it_admin")
}
func (DeviceGroupItAdminUserset) IsUserset()    {}
func (DeviceGroupItAdminUserset) IsFilterable() {}

// DeviceGroupSecurityGuardUserset represents the "device_group:{ID}#security_guard" userset.
type DeviceGroupSecurityGuardUserset struct {
	DeviceGroup
}

func (DeviceGroupSecurityGuardUserset) Provider() fluentfga.ObjectProvider { return objectProvider{} }
func (DeviceGroupSecurityGuardUserset) Relation() string                   { return "security_guard" }
func (u DeviceGroupSecurityGuardUserset) String() string {
	return fmt.Sprint("device_group:", u.Identifier(), "#security_guard")
}
func (DeviceGroupSecurityGuardUserset) IsUserset()    {}
func (DeviceGroupSecurityGuardUserset) IsFilterable() {}

type objectProvider struct{}

func (objectProvider) NewObject(typ, id, rel string) (fluentfga.Object, error) {
	switch {
	case typ == "user" && rel == "":
		return User{ID: id}, nil
	case typ == "device" && rel == "":
		return Device{ID: id}, nil
	case typ == "device_group" && rel == "it_admin":
		return DeviceGroupItAdminUserset{DeviceGroup{ID: id}}, nil
	case typ == "device_group" && rel == "security_guard":
		return DeviceGroupSecurityGuardUserset{DeviceGroup{ID: id}}, nil
	case typ == "device_group" && rel == "":
		return DeviceGroup{ID: id}, nil

	default:
		// TODO: Custom error type
		return nil, fmt.Errorf("unknown object type %s %s %s", typ, id, rel)
	}
}
