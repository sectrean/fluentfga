// Code generated by fluentfga. DO NOT EDIT.
package fga

import (
	sdkclient "github.com/openfga/go-sdk/client"
)

type Type interface {
	typeName() string
}

// UserType represents the "user" type and provides interfaces for its relations.
type UserType struct {
	client sdkclient.SdkClient
}

func (UserType) typeName() string { return "user" }
func (UserType) String() string   { return "user" }

// DeviceType represents the "device" type and provides interfaces for its relations.
type DeviceType struct {
	client sdkclient.SdkClient
}

func (DeviceType) typeName() string { return "device" }
func (DeviceType) String() string   { return "device" }

// DeviceRenamer provides an interface for the "device#device_renamer" relation.
func (t DeviceType) DeviceRenamer() RelationInterface[DeviceObject] {
	return relation[DeviceObject]{
		client: t.client,
		typ:    "device",
		rel:    "device_renamer",
	}
}

// ItAdmin provides an interface for the "device#it_admin" relation.
func (t DeviceType) ItAdmin() DirectRelationInterface[DeviceItAdminUser, DeviceObject] {
	return directRelation[DeviceItAdminUser, DeviceObject]{relation[DeviceObject]{
		client: t.client,
		typ:    "device",
		rel:    "it_admin",
	}}
}

// DeviceItAdminUser represents the possible user types for the "device#it_admin" relation.
//
// It is a union of the following types:
//   - UserObject
//   - DeviceGroupItAdminUserset
type DeviceItAdminUser interface {
	Object
	deviceItAdminUser()
}

func (UserObject) deviceItAdminUser()                {}
func (DeviceGroupItAdminUserset) deviceItAdminUser() {}

// LiveVideoViewer provides an interface for the "device#live_video_viewer" relation.
func (t DeviceType) LiveVideoViewer() RelationInterface[DeviceObject] {
	return relation[DeviceObject]{
		client: t.client,
		typ:    "device",
		rel:    "live_video_viewer",
	}
}

// RecordedVideoViewer provides an interface for the "device#recorded_video_viewer" relation.
func (t DeviceType) RecordedVideoViewer() RelationInterface[DeviceObject] {
	return relation[DeviceObject]{
		client: t.client,
		typ:    "device",
		rel:    "recorded_video_viewer",
	}
}

// SecurityGuard provides an interface for the "device#security_guard" relation.
func (t DeviceType) SecurityGuard() DirectRelationInterface[DeviceSecurityGuardUser, DeviceObject] {
	return directRelation[DeviceSecurityGuardUser, DeviceObject]{relation[DeviceObject]{
		client: t.client,
		typ:    "device",
		rel:    "security_guard",
	}}
}

// DeviceSecurityGuardUser represents the possible user types for the "device#security_guard" relation.
//
// It is a union of the following types:
//   - UserObject
//   - DeviceGroupSecurityGuardUserset
type DeviceSecurityGuardUser interface {
	Object
	deviceSecurityGuardUser()
}

func (UserObject) deviceSecurityGuardUser()                      {}
func (DeviceGroupSecurityGuardUserset) deviceSecurityGuardUser() {}

// DeviceGroupType represents the "device_group" type and provides interfaces for its relations.
type DeviceGroupType struct {
	client sdkclient.SdkClient
}

func (DeviceGroupType) typeName() string { return "device_group" }
func (DeviceGroupType) String() string   { return "device_group" }

// ItAdmin provides an interface for the "device_group#it_admin" relation.
func (t DeviceGroupType) ItAdmin() DirectRelationInterface[UserObject, DeviceGroupObject] {
	return directRelation[UserObject, DeviceGroupObject]{relation[DeviceGroupObject]{
		client: t.client,
		typ:    "device_group",
		rel:    "it_admin",
	}}
}

// SecurityGuard provides an interface for the "device_group#security_guard" relation.
func (t DeviceGroupType) SecurityGuard() DirectRelationInterface[UserObject, DeviceGroupObject] {
	return directRelation[UserObject, DeviceGroupObject]{relation[DeviceGroupObject]{
		client: t.client,
		typ:    "device_group",
		rel:    "security_guard",
	}}
}
