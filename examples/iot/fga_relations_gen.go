// Code generated by fluentfga. DO NOT EDIT.
package fga

import (
	"context"

	sdk "github.com/openfga/go-sdk"
	sdkclient "github.com/openfga/go-sdk/client"
)

type Relation interface {
	typeName() string
	relation() string
}

type IndirectRelation[O Object] struct {
	client sdkclient.SdkClient

	typ string
	rel string
}

func (r IndirectRelation[O]) typeName() string { return r.typ }
func (r IndirectRelation[O]) relation() string { return r.rel }

func (r IndirectRelation[O]) Check(ctx context.Context, user Object, object O, opts ...CheckOption) (bool, error) {
	req := r.client.Check(ctx).
		Body(sdkclient.ClientCheckRequest{
			User:     user.String(),
			Relation: r.relation(),
			Object:   object.String(),
		})

	for _, opt := range opts {
		opt.applyCheckOption(req)
	}

	res, err := req.Execute()
	if err != nil {
		return false, err
	}

	return res.GetAllowed(), nil
}

func (r IndirectRelation[O]) ListObjects(ctx context.Context, user Object, opts ...ListObjectsOption) ([]O, error) {
	req := r.client.ListObjects(ctx).
		Body(sdkclient.ClientListObjectsRequest{
			User:     user.String(),
			Relation: r.relation(),
		})

	for _, opt := range opts {
		opt.applyListObjectsOption(req)
	}

	data, err := req.Execute()
	if err != nil {
		return nil, err
	}

	return newObjects[O](data.Objects)
}

func (r IndirectRelation[O]) ListUsers(ctx context.Context, object O, opts ...ListUsersOption) ([]Object, error) {
	req := r.client.ListUsers(ctx).
		Body(sdkclient.ClientListUsersRequest{
			Object: sdk.FgaObject{
				Type: object.typeName(),
				Id:   object.id(),
			},
			Relation: r.relation(),
		})

	for _, opt := range opts {
		opt.applyListUsersOption(req)
	}

	data, err := req.Execute()
	if err != nil {
		return nil, err
	}

	return newUsers(data.Users)
}

type DirectRelation[U Object, O Object] struct {
	IndirectRelation[O]
}

func (r DirectRelation[U, O]) Write(ctx context.Context, user U, object O, opts ...WriteOption) error {
	req := r.client.Write(ctx).
		Body(sdkclient.ClientWriteRequest{
			Writes: []sdkclient.ClientTupleKey{
				{
					User:     user.String(),
					Relation: r.relation(),
					Object:   object.String(),
				},
			},
		})

	for _, opt := range opts {
		opt.applyWriteOption(req)
	}

	_, err := req.Execute()
	if err != nil {
		return err
	}

	return nil
}

func (r DirectRelation[U, O]) Delete(ctx context.Context, user U, object O, opts ...WriteOption) error {
	req := r.client.Write(ctx).
		Body(sdkclient.ClientWriteRequest{
			Deletes: []sdkclient.ClientTupleKeyWithoutCondition{
				{
					User:     user.String(),
					Relation: r.relation(),
					Object:   object.String(),
				},
			},
		})

	for _, opt := range opts {
		opt.applyWriteOption(req)
	}

	_, err := req.Execute()
	if err != nil {
		return err
	}

	return nil
}
