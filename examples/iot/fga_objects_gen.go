// Code generated by fluentfga. DO NOT EDIT.
package fga

import (
	"errors"
	"fmt"
	"strings"

	sdk "github.com/openfga/go-sdk"
	sdkclient "github.com/openfga/go-sdk/client"
)

type Object interface {
	typeName() string
	id() string
	String() string
}

type Userset interface {
	Object
	Relation
}

type ContextualTuple interface {
	tuple() sdkclient.ClientTupleKey
}

// User represents an object of the "user" type.
type User struct {
	UserID string
}

func (User) typeName() string { return "user" }
func (u User) id() string     { return fmt.Sprint(u.UserID) }
func (u User) String() string { return fmt.Sprint("user:", u.UserID) }

// Device represents an object of the "device" type.
type Device struct {
	DeviceID string
}

func (Device) typeName() string { return "device" }
func (d Device) id() string     { return fmt.Sprint(d.DeviceID) }
func (d Device) String() string { return fmt.Sprint("device:", d.DeviceID) }

// DeviceGroup represents an object of the "device_group" type.
type DeviceGroup struct {
	DeviceGroupID string
}

func (DeviceGroup) typeName() string { return "device_group" }
func (d DeviceGroup) id() string     { return fmt.Sprint(d.DeviceGroupID) }
func (d DeviceGroup) String() string { return fmt.Sprint("device_group:", d.DeviceGroupID) }

// DeviceGroupItAdminUserset is the "device_group:{DeviceGroupID}#it_admin" userset.
type DeviceGroupItAdminUserset struct {
	DeviceGroup
}

func (DeviceGroupItAdminUserset) relation() string { return "it_admin" }
func (u DeviceGroupItAdminUserset) String() string {
	return fmt.Sprint("device_group:", u.id(), "#it_admin")
}

// DeviceGroupUserset returns the "device_group:{DeviceGroupID}#it_admin" userset.
func (d DeviceGroup) ItAdminUserset() DeviceGroupItAdminUserset {
	return DeviceGroupItAdminUserset{d}
}

// DeviceGroupSecurityGuardUserset is the "device_group:{DeviceGroupID}#security_guard" userset.
type DeviceGroupSecurityGuardUserset struct {
	DeviceGroup
}

func (DeviceGroupSecurityGuardUserset) relation() string { return "security_guard" }
func (u DeviceGroupSecurityGuardUserset) String() string {
	return fmt.Sprint("device_group:", u.id(), "#security_guard")
}

// DeviceGroupUserset returns the "device_group:{DeviceGroupID}#security_guard" userset.
func (d DeviceGroup) SecurityGuardUserset() DeviceGroupSecurityGuardUserset {
	return DeviceGroupSecurityGuardUserset{d}
}

func parseObject[O Object](s string) (o O, _ error) {
	parts := strings.Split(s, ":")
	if len(parts) != 2 {
		return o, fmt.Errorf("invalid object: %q", s)
	}

	object := newObject(parts[0], parts[1])

	o, ok := object.(O)
	if !ok {
		return o, fmt.Errorf("unexpected object type: %q", s)
	}

	return o, nil
}

func newObjects[O Object](objs []string) ([]O, error) {
	objects := make([]O, 0, len(objs))
	var errs []error

	for _, s := range objs {
		obj, err := parseObject[O](s)
		if err != nil {
			errs = append(errs, err)
			continue
		}

		objects = append(objects, obj)
	}

	return objects, errors.Join(errs...)
}

func newObject(typ, id string) Object {
	switch typ {
	case "user":
		return User{UserID: id}
	case "device":
		return Device{DeviceID: id}
	case "device_group":
		return DeviceGroup{DeviceGroupID: id}

	default:
		return unknownObject{typ, id}
	}
}

func newUsers(data []sdk.User) ([]Object, error) {
	users := make([]Object, 0, len(data))
	var errs []error

	for _, u := range data {
		user, err := newUser(u)
		if err != nil {
			errs = append(errs, err)
			continue
		}

		users = append(users, user)
	}

	return users, errors.Join(errs...)
}

func newUser(u sdk.User) (Object, error) {
	if u.Object != nil {
		return newObject(u.Object.Type, u.Object.Id), nil
	}
	if u.Userset != nil {
		return newUserset(u.Userset.Type, u.Userset.Id, u.Userset.Relation), nil
	}
	if u.Wildcard != nil {
		return newObject(u.Wildcard.Type, "*"), nil
	}

	return nil, fmt.Errorf("unknown user type %v", u)
}

func newUserset(typ, id, rel string) Userset {
	if typ == "device_group" && rel == "it_admin" {
		return DeviceGroupItAdminUserset{DeviceGroup{DeviceGroupID: id}}
	}
	if typ == "device_group" && rel == "security_guard" {
		return DeviceGroupSecurityGuardUserset{DeviceGroup{DeviceGroupID: id}}
	}

	return unknownUserset{typ, id, rel}
}

// unknownObject represents an object of an unknown type.
//
// If the authorization model version used by OpenFGA is different from the one this code was generated for,
// it's possible that the server will return objects that are not known to this code.
type unknownObject struct {
	objType, objID string
}

func (o unknownObject) typeName() string { return o.objType }
func (o unknownObject) id() string       { return o.objID }
func (o unknownObject) String() string   { return fmt.Sprint(o.objType, ":", o.objID) }

type unknownUserset struct {
	objType, objID, rel string
}

func (u unknownUserset) typeName() string { return u.objType }
func (u unknownUserset) id() string       { return u.objID }
func (u unknownUserset) relation() string { return u.rel }
func (u unknownUserset) String() string   { return fmt.Sprint(u.objType, ":", u.objID, '#', u.rel) }
