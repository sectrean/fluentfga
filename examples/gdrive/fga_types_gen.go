// Code generated by fluentfga. DO NOT EDIT.
package fga

type Type interface {
	typeName() string
}

// UserType represents the "user" type and provides interfaces for its relations.
type UserType struct {
	model *AuthorizationModel
}

func (UserType) typeName() string { return "user" }

// DocumentType represents the "document" type and provides interfaces for its relations.
type DocumentType struct {
	model *AuthorizationModel
}

func (DocumentType) typeName() string { return "document" }

// Owner provides an interface for the "document#owner" relation.
func (d DocumentType) Owner() DirectRelation[DocumentOwnerUser, Document] {
	return DirectRelation[DocumentOwnerUser, Document]{
		model: d.model,
		typ:   "document",
		rel:   "owner",
	}
}

// DocumentOwnerUser represents the possible user types for the "document#owner" relation.
// It is a union of the following types:
//   - User
//   - DomainMemberUserset
type DocumentOwnerUser interface {
	Object
	documentOwnerUser()
}

func (User) documentOwnerUser()                {}
func (DomainMemberUserset) documentOwnerUser() {}

// Writer provides an interface for the "document#writer" relation.
func (d DocumentType) Writer() DirectRelation[DocumentWriterUser, Document] {
	return DirectRelation[DocumentWriterUser, Document]{
		model: d.model,
		typ:   "document",
		rel:   "writer",
	}
}

// DocumentWriterUser represents the possible user types for the "document#writer" relation.
// It is a union of the following types:
//   - User
//   - DomainMemberUserset
type DocumentWriterUser interface {
	Object
	documentWriterUser()
}

func (User) documentWriterUser()                {}
func (DomainMemberUserset) documentWriterUser() {}

// Commenter provides an interface for the "document#commenter" relation.
func (d DocumentType) Commenter() DirectRelation[DocumentCommenterUser, Document] {
	return DirectRelation[DocumentCommenterUser, Document]{
		model: d.model,
		typ:   "document",
		rel:   "commenter",
	}
}

// DocumentCommenterUser represents the possible user types for the "document#commenter" relation.
// It is a union of the following types:
//   - User
//   - DomainMemberUserset
type DocumentCommenterUser interface {
	Object
	documentCommenterUser()
}

func (User) documentCommenterUser()                {}
func (DomainMemberUserset) documentCommenterUser() {}

// Viewer provides an interface for the "document#viewer" relation.
func (d DocumentType) Viewer() DirectRelation[DocumentViewerUser, Document] {
	return DirectRelation[DocumentViewerUser, Document]{
		model: d.model,
		typ:   "document",
		rel:   "viewer",
	}
}

// DocumentViewerUser represents the possible user types for the "document#viewer" relation.
// It is a union of the following types:
//   - User
//   - UserWildcard
//   - DomainMemberUserset
type DocumentViewerUser interface {
	Object
	documentViewerUser()
}

func (User) documentViewerUser()                {}
func (UserWildcard) documentViewerUser()        {}
func (DomainMemberUserset) documentViewerUser() {}

// Parent provides an interface for the "document#parent" relation.
func (d DocumentType) Parent() DirectRelation[Document, Document] {
	return DirectRelation[Document, Document]{
		model: d.model,
		typ:   "document",
		rel:   "parent",
	}
}

// DomainType represents the "domain" type and provides interfaces for its relations.
type DomainType struct {
	model *AuthorizationModel
}

func (DomainType) typeName() string { return "domain" }

// Member provides an interface for the "domain#member" relation.
func (d DomainType) Member() DirectRelation[User, Domain] {
	return DirectRelation[User, Domain]{
		model: d.model,
		typ:   "domain",
		rel:   "member",
	}
}
