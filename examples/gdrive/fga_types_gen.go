// Code generated by fluentfga. DO NOT EDIT.
package fga

import (
	sdkclient "github.com/openfga/go-sdk/client"
)

type Type interface {
	typeName() string
}

// UserType represents the "user" type and provides interfaces for its relations.
type UserType struct {
	client sdkclient.SdkClient
}

func (UserType) typeName() string { return "user" }

// DocumentType represents the "document" type and provides interfaces for its relations.
type DocumentType struct {
	client sdkclient.SdkClient
}

func (DocumentType) typeName() string { return "document" }

// Commenter provides an interface for the "document#commenter" relation.
func (t DocumentType) Commenter() DirectRelationOperations[DocumentCommenterUser, DocumentObject] {
	return directRelation[DocumentCommenterUser, DocumentObject]{relation[DocumentObject]{
		client: t.client,
		typ:    "document",
		rel:    "commenter",
	}}
}

// DocumentCommenterUser represents the possible user types for the "document#commenter" relation.
// It is a union of the following types:
//   - UserObject
//   - DomainMemberUserset
type DocumentCommenterUser interface {
	Object
	documentCommenterUser()
}

func (UserObject) documentCommenterUser()          {}
func (DomainMemberUserset) documentCommenterUser() {}

// Owner provides an interface for the "document#owner" relation.
func (t DocumentType) Owner() DirectRelationOperations[DocumentOwnerUser, DocumentObject] {
	return directRelation[DocumentOwnerUser, DocumentObject]{relation[DocumentObject]{
		client: t.client,
		typ:    "document",
		rel:    "owner",
	}}
}

// DocumentOwnerUser represents the possible user types for the "document#owner" relation.
// It is a union of the following types:
//   - UserObject
//   - DomainMemberUserset
type DocumentOwnerUser interface {
	Object
	documentOwnerUser()
}

func (UserObject) documentOwnerUser()          {}
func (DomainMemberUserset) documentOwnerUser() {}

// Parent provides an interface for the "document#parent" relation.
func (t DocumentType) Parent() DirectRelationOperations[DocumentObject, DocumentObject] {
	return directRelation[DocumentObject, DocumentObject]{relation[DocumentObject]{
		client: t.client,
		typ:    "document",
		rel:    "parent",
	}}
}

// Viewer provides an interface for the "document#viewer" relation.
func (t DocumentType) Viewer() DirectRelationOperations[DocumentViewerUser, DocumentObject] {
	return directRelation[DocumentViewerUser, DocumentObject]{relation[DocumentObject]{
		client: t.client,
		typ:    "document",
		rel:    "viewer",
	}}
}

// DocumentViewerUser represents the possible user types for the "document#viewer" relation.
// It is a union of the following types:
//   - UserObject
//   - UserWildcard
//   - DomainMemberUserset
type DocumentViewerUser interface {
	Object
	documentViewerUser()
}

func (UserObject) documentViewerUser()          {}
func (UserWildcard) documentViewerUser()        {}
func (DomainMemberUserset) documentViewerUser() {}

// Writer provides an interface for the "document#writer" relation.
func (t DocumentType) Writer() DirectRelationOperations[DocumentWriterUser, DocumentObject] {
	return directRelation[DocumentWriterUser, DocumentObject]{relation[DocumentObject]{
		client: t.client,
		typ:    "document",
		rel:    "writer",
	}}
}

// DocumentWriterUser represents the possible user types for the "document#writer" relation.
// It is a union of the following types:
//   - UserObject
//   - DomainMemberUserset
type DocumentWriterUser interface {
	Object
	documentWriterUser()
}

func (UserObject) documentWriterUser()          {}
func (DomainMemberUserset) documentWriterUser() {}

// DomainType represents the "domain" type and provides interfaces for its relations.
type DomainType struct {
	client sdkclient.SdkClient
}

func (DomainType) typeName() string { return "domain" }

// Member provides an interface for the "domain#member" relation.
func (t DomainType) Member() DirectRelationOperations[UserObject, DomainObject] {
	return directRelation[UserObject, DomainObject]{relation[DomainObject]{
		client: t.client,
		typ:    "domain",
		rel:    "member",
	}}
}
