// Code generated by fluentfga. DO NOT EDIT.
package model

import (
	"fmt"

	fluentfga "github.com/johnrutherford/fluentfga"
)

// User represents an object of the "user" type.
type User struct {
	ID string
}

func (User) Provider() fluentfga.ObjectProvider { return objectProvider{} }
func (User) FgaType() string                    { return "user" }
func (o User) Identifier() string               { return fmt.Sprint(o.ID) }
func (o User) String() string                   { return fmt.Sprint("user:", o.ID) }
func (User) IsFilterable()                      {}

// UserWildcard represents the "user:*" wildcard.
type UserWildcard struct{}

func (UserWildcard) Provider() fluentfga.ObjectProvider { return objectProvider{} }
func (UserWildcard) FgaType() string                    { return "user" }
func (UserWildcard) Identifier() string                 { return "*" }
func (UserWildcard) String() string                     { return "user:*" }
func (UserWildcard) IsWildcard()                        {}

// Document represents an object of the "document" type.
type Document struct {
	ID string
}

func (Document) Provider() fluentfga.ObjectProvider { return objectProvider{} }
func (Document) FgaType() string                    { return "document" }
func (o Document) Identifier() string               { return fmt.Sprint(o.ID) }
func (o Document) String() string                   { return fmt.Sprint("document:", o.ID) }
func (Document) IsFilterable()                      {}

// Domain represents an object of the "domain" type.
type Domain struct {
	ID string
}

func (Domain) Provider() fluentfga.ObjectProvider { return objectProvider{} }
func (Domain) FgaType() string                    { return "domain" }
func (o Domain) Identifier() string               { return fmt.Sprint(o.ID) }
func (o Domain) String() string                   { return fmt.Sprint("domain:", o.ID) }
func (Domain) IsFilterable()                      {}

// DomainMemberUserset represents the "domain:{ID}#member" userset.
type DomainMemberUserset struct {
	Domain
}

func (DomainMemberUserset) Provider() fluentfga.ObjectProvider { return objectProvider{} }
func (DomainMemberUserset) Relation() string                   { return "member" }
func (u DomainMemberUserset) String() string                   { return fmt.Sprint("domain:", u.Identifier(), "#member") }
func (DomainMemberUserset) IsUserset()                         {}
func (DomainMemberUserset) IsFilterable()                      {}

type objectProvider struct{}

func (objectProvider) NewObject(typ, id, rel string) (fluentfga.Object, error) {
	switch {
	case typ == "user" && id == "*" && rel == "":
		return UserWildcard{}, nil
	case typ == "user" && rel == "":
		return User{ID: id}, nil
	case typ == "document" && rel == "":
		return Document{ID: id}, nil
	case typ == "domain" && rel == "member":
		return DomainMemberUserset{Domain{ID: id}}, nil
	case typ == "domain" && rel == "":
		return Domain{ID: id}, nil

	default:
		// TODO: Custom error type
		return nil, fmt.Errorf("unknown object type %s %s %s", typ, id, rel)
	}
}
