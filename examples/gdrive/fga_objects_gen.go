// Code generated by fluentfga. DO NOT EDIT.
package fga

import (
	"fmt"
	"strings"

	sdk "github.com/openfga/go-sdk"
)

type Object interface {
	typeName() string
	id() string
	String() string
}

type Userset interface {
	Object
	Relation
}

// User represents an object of the "user" type.
type User struct {
	UserID string
}

func (User) typeName() string { return "user" }
func (u User) id() string     { return fmt.Sprint(u.UserID) }
func (u User) String() string { return fmt.Sprint("user:", u.UserID) }

// UserWildcard represents public access: "user:*".
type UserWildcard struct{}

func (UserWildcard) typeName() string { return "user" }
func (UserWildcard) id() string       { return "*" }
func (UserWildcard) String() string   { return "user:*" }

// Document represents an object of the "document" type.
type Document struct {
	DocumentID string
}

func (Document) typeName() string { return "document" }
func (d Document) id() string     { return fmt.Sprint(d.DocumentID) }
func (d Document) String() string { return fmt.Sprint("document:", d.DocumentID) }

// Domain represents an object of the "domain" type.
type Domain struct {
	DomainID string
}

func (Domain) typeName() string { return "domain" }
func (d Domain) id() string     { return fmt.Sprint(d.DomainID) }
func (d Domain) String() string { return fmt.Sprint("domain:", d.DomainID) }

// DomainMemberUserset is the "domain:{DomainID}#member" userset.
type DomainMemberUserset struct {
	Domain
}

func (DomainMemberUserset) relation() string { return "member" }
func (u DomainMemberUserset) String() string { return fmt.Sprint("domain:", u.id(), "#member") }

// DomainUserset returns the "domain:{DomainID}#member" userset.
func (d Domain) MemberUserset() DomainMemberUserset {
	return DomainMemberUserset{d}
}

func newObjects[O Object](objs []string) ([]O, error) {
	objects := make([]O, len(objs))

	// TODO: Use multierror to collect all errors.
	for i, s := range objs {
		parts := strings.Split(s, ":")
		if len(parts) != 2 {
			return nil, fmt.Errorf("invalid object: %q", s)
		}

		obj := newObject(parts[0], parts[1])
		o, ok := obj.(O)
		if !ok {
			return nil, fmt.Errorf("unexpected object type: %q", s)
		}

		objects[i] = o
	}
	return objects, nil
}

func newObject(typ, id string) Object {
	switch typ {
	case "user":
		return User{UserID: id}
	case "document":
		return Document{DocumentID: id}
	case "domain":
		return Domain{DomainID: id}

	default:
		return unknownObject{typ, id}
	}
}

func newUsers(data []sdk.User) []Object {
	users := make([]Object, len(data))

	for i, u := range data {
		users[i] = newUser(u)
	}
	return users
}

func newUser(u sdk.User) Object {
	if u.Object != nil {
		return newObject(u.Object.Type, u.Object.Id)
	}
	if u.Userset != nil {
		return newUserset(u.Userset.Type, u.Userset.Id, u.Userset.Relation)
	}
	if u.Wildcard != nil {
		return newObject(u.Wildcard.Type, "*")
	}

	panic("unknown user type")
}

func newUserset(typ, id, rel string) Userset {
	if typ == "domain" && rel == "member" {
		return DomainMemberUserset{Domain{DomainID: id}}
	}

	panic("unknown userset type")
}

// unknownObject represents an object of an unknown type.
//
// If the authorization model version used by OpenFGA is different from the one this code was generated for,
// it's possible that the server will return objects that are not known to this code.
type unknownObject struct {
	objType, objID string
}

func (o unknownObject) typeName() string { return o.objType }
func (o unknownObject) id() string       { return o.objID }
func (o unknownObject) String() string   { return fmt.Sprint(o.objType, ":", o.objID) }
