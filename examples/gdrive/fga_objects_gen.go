// Code generated by fluentfga. DO NOT EDIT.
package fga

import (
	"fmt"
)

type Object interface {
	typeName() string
	id() string
	String() string
}

type Userset interface {
	Object
	Relation
}

// User represents an object of the "user" type.
type User struct {
	UserID string
}

func (User) typeName() string { return "user" }
func (u User) id() string     { return fmt.Sprint(u.UserID) }
func (u User) String() string { return fmt.Sprint("user:", u.UserID) }

// UserWildcard represents public access: "user:*".
type UserWildcard struct{}

func (UserWildcard) typeName() string { return "user" }
func (UserWildcard) id() string       { return "*" }
func (UserWildcard) String() string   { return "user:*" }

func (u User) Wildcard() UserWildcard {
	return UserWildcard{}
}

// Document represents an object of the "document" type.
type Document struct {
	DocumentID string
}

func (Document) typeName() string { return "document" }
func (d Document) id() string     { return fmt.Sprint(d.DocumentID) }
func (d Document) String() string { return fmt.Sprint("document:", d.DocumentID) }

// Domain represents an object of the "domain" type.
type Domain struct {
	DomainID string
}

func (Domain) typeName() string { return "domain" }
func (d Domain) id() string     { return fmt.Sprint(d.DomainID) }
func (d Domain) String() string { return fmt.Sprint("domain:", d.DomainID) }

// DomainMemberUserset is the "domain:{DomainID}#member" userset.
type DomainMemberUserset struct {
	Domain
}

func (DomainMemberUserset) relation() string { return "member" }
func (u DomainMemberUserset) String() string { return fmt.Sprint("domain:", u.id(), "#member") }

// DomainUserset returns the "domain:{DomainID}#member" userset.
func (d Domain) MemberUserset() DomainMemberUserset {
	return DomainMemberUserset{d}
}
