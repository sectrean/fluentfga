// Code generated by fluentfga. DO NOT EDIT.
package fga

import (
	"errors"
	"fmt"
	"strings"

	sdk "github.com/openfga/go-sdk"
	sdkclient "github.com/openfga/go-sdk/client"
)

// Object represents an entity in the system.
//
// An object is a combination of a type and an identifier.
//
// For example:
// - workspace:fb83c013-3060-41f4-9590-d3233a67938f
// - repository:auth0/express-jwt
// - organization:org_ajUc9kJ
// - document:new-roadmap
type Object interface {
	typeName() string
	identifier() string
	String() string
}

type Userset interface {
	Object
	Relation
}

type ContextualTuple interface {
	tuple() sdkclient.ClientTupleKey
}

// UserObject represents an object of the "user" type.
type UserObject struct {
	UserID string
}

func (UserObject) typeName() string     { return "user" }
func (o UserObject) identifier() string { return fmt.Sprint(o.UserID) }
func (o UserObject) String() string     { return fmt.Sprint("user:", o.UserID) }

// UserWildcard represents public access: "user:*".
type UserWildcard struct{}

func (UserWildcard) typeName() string   { return "user" }
func (UserWildcard) identifier() string { return "*" }
func (UserWildcard) String() string     { return "user:*" }

// DocumentObject represents an object of the "document" type.
type DocumentObject struct {
	DocumentID string
}

func (DocumentObject) typeName() string     { return "document" }
func (o DocumentObject) identifier() string { return fmt.Sprint(o.DocumentID) }
func (o DocumentObject) String() string     { return fmt.Sprint("document:", o.DocumentID) }

// DomainObject represents an object of the "domain" type.
type DomainObject struct {
	DomainID string
}

func (DomainObject) typeName() string     { return "domain" }
func (o DomainObject) identifier() string { return fmt.Sprint(o.DomainID) }
func (o DomainObject) String() string     { return fmt.Sprint("domain:", o.DomainID) }

// DomainMemberUserset is the "domain:{DomainID}#member" userset.
type DomainMemberUserset struct {
	DomainObject
}

func (DomainMemberUserset) relation() string { return "member" }
func (u DomainMemberUserset) String() string { return fmt.Sprint("domain:", u.identifier(), "#member") }

// DomainUserset returns the "domain:{DomainID}#member" userset.
func (o DomainObject) MemberUserset() DomainMemberUserset {
	return DomainMemberUserset{o}
}

func parseObject[O Object](s string) (o O, _ error) {
	parts := strings.Split(s, ":")
	if len(parts) != 2 {
		return o, fmt.Errorf("invalid object: %q", s)
	}

	object := newObject(parts[0], parts[1])

	o, ok := object.(O)
	if !ok {
		return o, fmt.Errorf(
			"unexpected object type: %T does not implement %T: object %q",
			object, o, s,
		)
	}

	return o, nil
}

func newObjects[O Object](objs []string) ([]O, error) {
	objects := make([]O, 0, len(objs))
	var errs []error

	for _, s := range objs {
		obj, err := parseObject[O](s)
		if err != nil {
			errs = append(errs, err)
			continue
		}

		objects = append(objects, obj)
	}

	return objects, errors.Join(errs...)
}

func newObject(typ, id string) Object {
	switch {
	case typ == "user" && id == "*":
		return UserWildcard{}
	case typ == "user":
		return UserObject{UserID: id}
	case typ == "document":
		return DocumentObject{DocumentID: id}
	case typ == "domain":
		return DomainObject{DomainID: id}

	default:
		return unknownObject{typ, id}
	}
}

func newUsers(data []sdk.User) ([]Object, error) {
	users := make([]Object, 0, len(data))
	var errs []error

	for _, u := range data {
		user, err := newUser(u)
		if err != nil {
			errs = append(errs, err)
			continue
		}

		users = append(users, user)
	}

	return users, errors.Join(errs...)
}

func newUser(u sdk.User) (Object, error) {
	if u.Object != nil {
		return newObject(u.Object.Type, u.Object.Id), nil
	}
	if u.Wildcard != nil {
		return newObject(u.Wildcard.Type, "*"), nil
	}
	if u.Userset != nil {
		return newUserset(u.Userset.Type, u.Userset.Id, u.Userset.Relation), nil
	}

	return nil, fmt.Errorf("unknown user type %v", u)
}

func newUserset(typ, id, rel string) Userset {
	if typ == "domain" && rel == "member" {
		return DomainMemberUserset{DomainObject{DomainID: id}}
	}

	return unknownUserset{typ, id, rel}
}

// unknownObject represents an object of an unknown type.
//
// If the authorization model version used by OpenFGA is different from the one this code was generated for,
// it's possible that the server will return objects that are not known to this code.
type unknownObject struct {
	typ, id string
}

func (o unknownObject) typeName() string   { return o.typ }
func (o unknownObject) identifier() string { return o.id }
func (o unknownObject) String() string     { return fmt.Sprint(o.typ, ":", o.id) }

type unknownUserset struct {
	typ, id, rel string
}

func (u unknownUserset) typeName() string   { return u.typ }
func (u unknownUserset) identifier() string { return u.id }
func (u unknownUserset) relation() string   { return u.rel }
func (u unknownUserset) String() string     { return fmt.Sprint(u.typ, ":", u.id, '#', u.rel) }
