{{- /*gotype: github.com/johnrutherford/fluentfga/gen.Model*/ -}}

{{ define "relations" }}
{{ template "_header" . }}


{{ range .Types }}
{{ range .Relations }}
{{ $relType := print .Object.Type .Type "Relation" }}

// {{ $relType }} represents the "{{ .Object.Name }}#{{ .Name }}" relation.
type {{ $relType }} struct {}

func ({{ $relType }}) FgaType() string { return "{{ .Object.Name }}" }
func ({{ $relType }}) Relation() string { return "{{ .Name }}" }
func ({{ $relType }}) String() string { return "{{ .Object.Name }}#{{ .Name }}" }
func ({{ $relType }}) ObjectType({{ .Object.Type }}) { }

{{ if gt (len .UserTypes) 0 }}
{{ $relUserType := index .UserTypes 0 }}

{{ if gt (len .UserTypes) 1 }}
{{ $relUserType = print .Object.Type .Type "User" }}
{{ end }}
func (r {{ $relType }}) NewTuple(user {{ $relUserType }}, object {{ .Object.Type }}) fluentfga.Tuple {
    return fluentfga.NewTuple(user, r, object)
}

{{ if gt (len .UserTypes) 1 }}

// {{ $relUserType }} represents the direct user types for the "{{ .Object.Name }}#{{ .Name }}" relation.
//
// It is a union of the following types:
{{- range .UserTypes }}
//   - {{ . }}
{{- end }}
type {{ $relUserType }} interface {
    fluentfga.Object
    {{ camelCase $relUserType }}()
}

{{ range .UserTypes -}}
func ({{ . }}) {{ camelCase $relUserType }}() { }
{{ end }}

{{ end }}

{{ end }}


{{ end }}

{{ end }}
{{ end }}
