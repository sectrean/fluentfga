{{- /*gotype: github.com/johnrutherford/fluentfga.Model*/ -}}

{{ define "objects" }}
{{ template "_header" . }}

type Object interface {
    typeName() string
    id() string
    String() string
}

type Userset interface {
    Object
    Relation
}

{{ range .Types }}
// {{ .Type }} represents an object of the "{{ .Name }}" type.
type {{ .Type }} struct {
    {{ .IDName }} {{ .IDType }}
}

func ({{ .Type }}) typeName() string { return "{{ .Name }}" }
func ({{ abbr .Type }} {{ .Type }}) id() string { return fmt.Sprint({{ abbr .Type }}.{{ .IDName }}) }
func ({{ abbr .Type }} {{ .Type }}) String() string { return fmt.Sprint("{{ .Name }}:", {{ abbr .Type }}.{{ .IDName }}) }

{{ if .HasWildcard }}
{{ $wildcardType := print .Type "Wildcard" }}
// {{ $wildcardType }} represents public access: "{{ .Name }}:*".
type {{ $wildcardType }} struct{}

func ({{ $wildcardType }}) typeName() string { return "{{ .Name }}" }
func ({{ $wildcardType }}) id() string { return "*" }
func ({{ $wildcardType }}) String() string { return "{{ .Name }}:*" }

{{ end }}

{{ range .Usersets }}
{{ $usersetType := print .Type }}
// {{ $usersetType }} is the "{{ .Object.Name }}:{{ print "{" .Object.IDName "}" }}#{{ .Relation }}" userset.
type {{ $usersetType }} struct {
    {{ .Object.Type }}
}

func ({{ $usersetType }}) relation() string { return "{{ .Relation }}" }
func (u {{ $usersetType }}) String() string { return fmt.Sprint("{{ .Object.Name }}:", u.id(), "#{{ .Relation }}") }

// {{ .Object.Type }}Userset returns the "{{ .Object.Name }}:{{ print "{" .Object.IDName "}" }}#{{ .Relation }}" userset.
func ({{ abbr .Object.Type }} {{ .Object.Type }}) {{ titleCase .Relation }}Userset() {{ $usersetType }} {
    return {{ $usersetType }}{ {{ abbr .Object.Type }} }
}

{{ end }}

{{ end }}

func newObjects[O Object](objs []string) ([]O, error) {
    objects := make([]O, len(objs))

    for i, s := range objs {
        parts := strings.Split(s, ":")
        if len(parts) != 2 {
            return nil, fmt.Errorf("invalid object: %q", s)
        }

        var obj Object
        switch parts[0] {
{{- range .Types }}
        case "{{ .Name }}":
            obj = {{ .Type }}{ {{ .IDName }}: parts[1] }
{{- end }}
        default:
            obj = unknownObject{parts[0], parts[1]}
        }

        o, ok := obj.(O)
        if !ok {
            // TODO: Use multierror to collect all errors.
            return nil, fmt.Errorf("unexpected object type: %q", s)
        }

        objects[i] = o
    }
    return objects, nil
}


// unknownObject represents an object of an unknown type.
//
// If the authorization model version used by OpenFGA is different from the one this code was generated for,
// it's possible that the server will return objects that are not known to this code.
type unknownObject struct {
    objType, objID string
}

func (o unknownObject) typeName() string { return o.objType }
func (o unknownObject) id() string { return o.objID }
func (o unknownObject) String() string { return fmt.Sprint(o.objType, ":", o.objID) }
{{ end }}
