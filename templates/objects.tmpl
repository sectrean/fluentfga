{{- /*gotype: github.com/johnrutherford/fluentfga.Model*/ -}}

{{ define "objects" }}
{{ template "_header" . }}

// Object represents an entity in the system.
//
// An object is a combination of a type and an identifier.
// 
// For example:
// - workspace:fb83c013-3060-41f4-9590-d3233a67938f
// - repository:auth0/express-jwt
// - organization:org_ajUc9kJ
// - document:new-roadmap
type Object interface {
    typeName() string
    identifier() string
    String() string
}

type Userset interface {
    Object
    Relation
}

type ContextualTuple interface {
    tuple() sdkclient.ClientTupleKey
}

{{ range .Types }}
// {{ .Type }}Object represents an object of the "{{ .Name }}" type.
type {{ .Type }}Object struct {
    {{ .IDName }} {{ .IDType }}
}

func ({{ .Type }}Object) typeName() string { return "{{ .Name }}" }
func (o {{ .Type }}Object) identifier() string { return fmt.Sprint(o.{{ .IDName }}) }
func (o {{ .Type }}Object) String() string { return fmt.Sprint("{{ .Name }}:", o.{{ .IDName }}) }

{{ if .HasWildcard }}
{{ $wildcardType := print .Type "Wildcard" }}
// {{ $wildcardType }} represents public access: "{{ .Name }}:*".
type {{ $wildcardType }} struct{}

func ({{ $wildcardType }}) typeName() string { return "{{ .Name }}" }
func ({{ $wildcardType }}) identifier() string { return "*" }
func ({{ $wildcardType }}) String() string { return "{{ .Name }}:*" }

{{ end }}

{{ range .Usersets }}
{{ $usersetType := print .Type }}
// {{ $usersetType }} is the "{{ .Object.Name }}:{{ print "{" .Object.IDName "}" }}#{{ .Relation }}" userset.
type {{ $usersetType }} struct {
    {{ .Object.Type }}Object
}

func ({{ $usersetType }}) relation() string { return "{{ .Relation }}" }
func (u {{ $usersetType }}) String() string { return fmt.Sprint("{{ .Object.Name }}:", u.identifier(), "#{{ .Relation }}") }

// {{ .Object.Type }}Userset returns the "{{ .Object.Name }}:{{ print "{" .Object.IDName "}" }}#{{ .Relation }}" userset.
func (o {{ .Object.Type }}Object) {{ titleCase .Relation }}Userset() {{ $usersetType }} {
    return {{ $usersetType }}{ o }
}

{{ end }}

{{ end }}

func parseObject[O Object](s string) (o O, _ error) {
    parts := strings.Split(s, ":")
    if len(parts) != 2 {
        return o, fmt.Errorf("invalid object: %q", s)
    }

    object := newObject(parts[0], parts[1])

    o, ok := object.(O)
    if !ok {
        return o, fmt.Errorf("unexpected object type: %q", s)
    }

    return o, nil
}

func newObjects[O Object](objs []string) ([]O, error) {
    objects := make([]O, 0, len(objs))
    var errs []error

    for _, s := range objs {
        obj, err := parseObject[O](s)
        if err != nil {
            errs = append(errs, err)
            continue
        }

        objects = append(objects, obj)
    }

    return objects, errors.Join(errs...)
}

func newObject(typ, id string) Object {
    switch typ {
{{- range .Types }}
{{ $objType := print .Type "Object" }}
    case "{{ .Name }}":
        return {{ $objType }}{ {{ .IDName }}: id }
{{- end }}

    default:
        return unknownObject{typ, id}
    }
}

func newUsers(data []sdk.User) ([]Object, error) {
    users := make([]Object, 0, len(data))
    var errs []error

    for _, u := range data {
        user, err := newUser(u)
        if err != nil {
            errs = append(errs, err)
            continue
        }

        users = append(users, user)
    }

    return users, errors.Join(errs...)
}

func newUser(u sdk.User) (Object, error) {
    if u.Object != nil {
        return newObject(u.Object.Type, u.Object.Id), nil
    }
    if u.Userset != nil {
        return newUserset(u.Userset.Type, u.Userset.Id, u.Userset.Relation), nil
    }
    if u.Wildcard != nil {
        return newObject(u.Wildcard.Type, "*"), nil
    }

    return nil, fmt.Errorf("unknown user type %v", u)
}

func newUserset(typ, id, rel string) Userset {
{{- range .Types }}
{{- range .Usersets }}
    if typ == "{{ .Object.Name }}" && rel == "{{ .Relation }}" {
        return {{ .Type }}{ {{ .Object.Type }}Object { {{ .Object.IDName }}: id } }
    }
{{- end }}
{{- end }}

    return unknownUserset{typ, id, rel}
}

// unknownObject represents an object of an unknown type.
//
// If the authorization model version used by OpenFGA is different from the one this code was generated for,
// it's possible that the server will return objects that are not known to this code.
type unknownObject struct {
    typ, id string
}

func (o unknownObject) typeName() string { return o.typ }
func (o unknownObject) identifier() string { return o.id }
func (o unknownObject) String() string { return fmt.Sprint(o.typ, ":", o.id) }

type unknownUserset struct {
    typ, id, rel string
}

func (u unknownUserset) typeName() string { return u.typ }
func (u unknownUserset) identifier() string { return u.id }
func (u unknownUserset) relation() string { return u.rel }
func (u unknownUserset) String() string { return fmt.Sprint(u.typ, ":", u.id, '#', u.rel) }


{{ end }}
