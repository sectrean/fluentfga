{{- /*gotype: github.com/johnrutherford/fluentfga.Model*/ -}}

{{ define "types" }}
{{ template "_header" . }}

type Type interface {
    typeName() string
}

{{ range .Types }}

// {{ .Type }}Type represents the "{{ .Name }}" type and provides interfaces for its relations.
type {{ .Type }}Type struct {
    client sdkclient.SdkClient
}

func ({{ .Type }}Type) typeName() string { return "{{ .Name }}" }

{{ range .Relations }}
{{ $relType := print .Object.Type .Type }}

{{ if eq (len .UserTypes) 0 }}
// {{ .Type }} provides an interface for the "{{ .Object.Name}}#{{ .Name }}" relation.
func (t {{ .Object.Type }}Type) {{ .Type }}() RelationOperations[{{ .Object.Type }}Object] {
    return relation[{{ .Object.Type }}Object]{
        client: t.client,
        typ: "{{ .Object.Name }}",
        rel: "{{ .Name }}",
    }
}

{{ else }}
{{ $relUserType := index .UserTypes 0 }}
{{ if gt (len .UserTypes) 1 }}
{{ $relUserType = print .Object.Type .Type "User" }}
{{ end }}

// {{ .Type }} provides an interface for the "{{ .Object.Name}}#{{ .Name }}" relation.
func (t {{ .Object.Type }}Type) {{ .Type }}() DirectRelationOperations[{{ $relUserType }}, {{ .Object.Type }}Object] {
    return directRelation[{{ $relUserType }}, {{ .Object.Type }}Object]{relation[{{ .Object.Type }}Object]{
        client: t.client,
        typ: "{{ .Object.Name }}",
        rel: "{{ .Name }}",
    }}
}

{{ if gt (len .UserTypes) 1 }}
// {{ $relUserType }} represents the possible user types for the "{{ .Object.Name }}#{{ .Name }}" relation.
// It is a union of the following types:
{{- range .UserTypes }}
//   - {{ . }}
{{- end }}
type {{ $relUserType }} interface {
    Object
    {{ camelCase $relUserType }}()
}

{{ range .UserTypes -}}
func ({{ . }}) {{ camelCase $relUserType }}() { }
{{ end }}
{{ end }}
{{ end }}
{{ end }}

{{ end }}

{{- end }}
