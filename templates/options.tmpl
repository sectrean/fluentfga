{{- /*gotype: github.com/johnrutherford/fluentfga.Model*/ -}}

{{ define "options" }}
{{ template "_header" . }}

type CheckOption interface {
    applyCheckOption(sdkclient.SdkClientCheckRequestInterface)
}
 
type ListObjectsOption interface {
    applyListObjectsOption(sdkclient.SdkClientListObjectsRequestInterface)
}

type ListUsersOption interface {
    applyListUsersOption(sdkclient.SdkClientListUsersRequestInterface)
}

type WriteOption interface {
    applyWriteOption(sdkclient.SdkClientWriteRequestInterface)
}

// TODO: Conditions on contextual tuples

type CheckListOption interface {
    CheckOption
    ListObjectsOption
    ListUsersOption
}

func WithContextualTuples(tuples ...ContextualTuple) CheckListOption {
    return contextualTuplesOption{tuples}
}

type contextualTuplesOption struct {
    Tuples []ContextualTuple
}

func (o contextualTuplesOption) applyCheckOption(req sdkclient.SdkClientCheckRequestInterface) {
	body := req.GetBody()	
	for _, t := range o.Tuples {
		body.ContextualTuples = append(body.ContextualTuples, t.tuple())
	}
}

func (o contextualTuplesOption) applyListObjectsOption(req sdkclient.SdkClientListObjectsRequestInterface) {
    body := req.GetBody()
    for _, t := range o.Tuples {
        body.ContextualTuples = append(body.ContextualTuples, t.tuple())
    }
}

func (o contextualTuplesOption) applyListUsersOption(req sdkclient.SdkClientListUsersRequestInterface) {
    body := req.GetBody()
    for _, t := range o.Tuples {
        body.ContextualTuples = append(body.ContextualTuples, t.tuple())
    }
}

func WithContext(context map[string]any) CheckListOption {
    return checkContextOption{&context}
}

type checkContextOption struct {
    Context *map[string]any
}

func (o checkContextOption) applyCheckOption(req sdkclient.SdkClientCheckRequestInterface) {
    req.GetBody().Context = o.Context
}

func (o checkContextOption) applyListObjectsOption(req sdkclient.SdkClientListObjectsRequestInterface) {
    req.GetBody().Context = o.Context
}

func (o checkContextOption) applyListUsersOption(req sdkclient.SdkClientListUsersRequestInterface) {
    req.GetBody().Context = o.Context
}

func WithUserTypeFilter(types ...Type) ListUsersOption {
    return userTypeFilterOption{types}
}

type userTypeFilterOption struct {
    Types []Type
}

func (o userTypeFilterOption) applyListUsersOption(req sdkclient.SdkClientListUsersRequestInterface) {
    body := req.GetBody()

    for _, t := range o.Types {
        filter := sdk.UserTypeFilter{
            Type: t.typeName(),
        }
        if r, ok := t.(Relation); ok {
            rel := r.relation()
            filter.Relation = &rel
        }

        body.UserFilters = append(body.UserFilters, filter)
    }
}

{{ end }}